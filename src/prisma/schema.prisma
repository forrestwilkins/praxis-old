datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Motion {
  id         Int       @id @default(autoincrement())
  body       String?
  action     String?
  actionData Json?
  stage      String    @default("voting")
  version    Int       @default(1)
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int?
  group      Group?    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId    Int?
  votes      Vote[]
  comments   Comment[]
  likes      Like[]
  images     Image[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Vote {
  id             Int      @id @default(autoincrement())
  body           String?
  flipState      String?
  consensusState String?
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int?
  motion         Motion?  @relation(fields: [motionId], references: [id])
  motionId       Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, motionId])
}

model User {
  id               Int             @id @default(autoincrement())
  name             String
  email            String
  password         String
  bio              String?
  posts            Post[]
  comments         Comment[]
  likes            Like[]
  groupMemberships GroupMember[]
  memberRequests   MemberRequest[]
  motions          Motion[]
  votes            Vote[]
  images           Image[]
  followers        Follow[]        @relation("Followers")
  following        Follow[]        @relation("Following")
  settings         Setting[]
  roles            RoleMember[]
  serverInvites    ServerInvite[]
  eventAttendees   EventAttendee[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Post {
  id        Int       @id @default(autoincrement())
  body      String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  group     Group?    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int?
  event     Event?    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   Int?
  comments  Comment[]
  likes     Like[]
  images    Image[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  motion    Motion?  @relation(fields: [motionId], references: [id], onDelete: Cascade)
  motionId  Int?
  likes     Like[]
  images    Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id         Int      @id @default(autoincrement())
  user       User?    @relation("Followers", fields: [userId], references: [id], onDelete: Cascade)
  userId     Int?
  follower   User?    @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, followerId])
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  motion    Motion?  @relation(fields: [motionId], references: [id], onDelete: Cascade)
  motionId  Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId, commentId])
}

model Group {
  id             Int             @id @default(autoincrement())
  name           String
  description    String
  images         Image[]
  posts          Post[]
  motions        Motion[]
  members        GroupMember[]
  memberRequests MemberRequest[]
  settings       Setting[]
  roles          Role[]
  events         Event[]
  creatorId      Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  group     Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, groupId])
}

model MemberRequest {
  id        Int      @id @default(autoincrement())
  status    String   @default("pending")
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  group     Group?   @relation(fields: [groupId], references: [id])
  groupId   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, groupId])
}

model Image {
  id             Int      @id @default(autoincrement())
  path           String
  user           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int?
  post           Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId         Int?
  motion         Motion?  @relation(fields: [motionId], references: [id], onDelete: Cascade)
  motionId       Int?
  comment        Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId      Int?
  group          Group?   @relation(fields: [groupId], references: [id])
  groupId        Int?
  event          Event?   @relation(fields: [eventId], references: [id])
  eventId        Int?
  variety        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Setting {
  id        Int      @id @default(autoincrement())
  name      String
  value     String
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  group     Group?   @relation(fields: [groupId], references: [id])
  groupId   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  color       String
  global      Boolean      @default(false)
  group       Group?       @relation(fields: [groupId], references: [id])
  groupId     Int?
  permissions Permission[]
  members     RoleMember[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model RoleMember {
  id        Int      @id @default(autoincrement())
  role      Role?    @relation(fields: [roleId], references: [id])
  roleId    Int?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String
  enabled     Boolean  @default(false)
  role        Role?    @relation(fields: [roleId], references: [id])
  roleId      Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ServerInvite {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  uses      Int       @default(0)
  maxUses   Int?
  user      User?     @relation(fields: [userId], references: [id])
  userId    Int?
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Event {
  id           Int       @id @default(autoincrement())
  name         String
  description  String
  location     String?
  startsAt     DateTime
  endsAt       DateTime?
  online       Boolean   @default(false)
  externalLink String?
  group        Group?    @relation(fields: [groupId], references: [id])
  groupId      Int?
  attendees    EventAttendee[]
  posts        Post[]
  images       Image[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model EventAttendee {
  id        Int      @id @default(autoincrement())
  status    String
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  event     Event?   @relation(fields: [eventId], references: [id])
  eventId   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}